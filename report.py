import sqlite3
import os
import json
import datetime

# NOTE: This template generates a clean Markdown report
REPORT_TEMPLATE = """
# Study Partner - Mistake Report

**Date:** {date}
**Total Mistakes:** {total_mistakes}

---

## Mistake Breakdown

{mistake_list}

---

_This report was generated by your personal AI Study Partner._
"""

def generate_report(conn: sqlite3.Connection):
    """
    Generates a Markdown report of all mistakes and saves it to a file.
    """
    cursor = conn.cursor()
    cursor.execute("""
        SELECT
            q.stem,
            m.wrong_answer,
            m.correct_answer,
            m.first_seen_at,
            d.path,
            c.page_from,
            c.page_to,
            c.content
        FROM mistakes m
        JOIN questions q ON q.id = m.question_id
        LEFT JOIN chunks c ON c.id = q.source_chunk_id
        LEFT JOIN documents d ON d.id = c.document_id
        ORDER BY m.first_seen_at DESC
    """)
    mistakes = cursor.fetchall()

    if not mistakes:
        return "No mistakes found in the database. Great job!"

    mistake_list = ""
    for i, row in enumerate(mistakes, 1):
        stem, wrong_ans, correct_ans, first_seen, path, page_from, page_to, content = row
        
        mistake_entry = (
            f"### {i}. Question: {stem}\n"
            f"- **Your Answer:** {wrong_ans}\n"
            f"- **Correct Answer:** {correct_ans}\n"
            f"- **Date:** {first_seen}\n"
        )
        
        if path:
            mistake_entry += f"- **Source:** {os.path.basename(path)}, page {page_from}\n"
        
        if content:
            # Show first 200 characters of the source content for context
            preview = content[:200] + "..." if len(content) > 200 else content
            mistake_entry += f"- **Source Content:** {preview}\n"
            
        mistake_entry += "\n"
        mistake_list += mistake_entry
    
    report_content = REPORT_TEMPLATE.format(
        date=datetime.date.today().isoformat(),
        total_mistakes=len(mistakes),
        mistake_list=mistake_list
    )

    # Save the report to a file
    report_dir = "reports"
    os.makedirs(report_dir, exist_ok=True)
    report_file = os.path.join(report_dir, f"mistake_report_{datetime.date.today().isoformat()}.md")
    
    with open(report_file, "w", encoding="utf-8") as f:
        f.write(report_content)
    
    return f"Report successfully saved to {report_file}"